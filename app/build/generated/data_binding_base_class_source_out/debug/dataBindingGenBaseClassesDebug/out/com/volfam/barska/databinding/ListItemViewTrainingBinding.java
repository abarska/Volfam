// Generated by data binding compiler. Do not edit!
package com.volfam.barska.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.databinding.Bindable;
import androidx.databinding.DataBindingUtil;
import androidx.databinding.ViewDataBinding;
import com.volfam.barska.R;
import com.volfam.barska.adapters.TrainingClickListener;
import com.volfam.barska.data.Training;
import java.lang.Deprecated;
import java.lang.Object;

public abstract class ListItemViewTrainingBinding extends ViewDataBinding {
  @NonNull
  public final TextView dateTextview;

  @NonNull
  public final TextView groupTextview;

  @NonNull
  public final TextView placeTextview;

  @NonNull
  public final ImageView trainerIcon;

  @Bindable
  protected Training mTraining;

  @Bindable
  protected TrainingClickListener mClickListener;

  protected ListItemViewTrainingBinding(Object _bindingComponent, View _root, int _localFieldCount,
      TextView dateTextview, TextView groupTextview, TextView placeTextview,
      ImageView trainerIcon) {
    super(_bindingComponent, _root, _localFieldCount);
    this.dateTextview = dateTextview;
    this.groupTextview = groupTextview;
    this.placeTextview = placeTextview;
    this.trainerIcon = trainerIcon;
  }

  public abstract void setTraining(@Nullable Training training);

  @Nullable
  public Training getTraining() {
    return mTraining;
  }

  public abstract void setClickListener(@Nullable TrainingClickListener clickListener);

  @Nullable
  public TrainingClickListener getClickListener() {
    return mClickListener;
  }

  @NonNull
  public static ListItemViewTrainingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot) {
    return inflate(inflater, root, attachToRoot, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.list_item_view_training, root, attachToRoot, component)
   */
  @NonNull
  @Deprecated
  public static ListItemViewTrainingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup root, boolean attachToRoot, @Nullable Object component) {
    return ViewDataBinding.<ListItemViewTrainingBinding>inflateInternal(inflater, R.layout.list_item_view_training, root, attachToRoot, component);
  }

  @NonNull
  public static ListItemViewTrainingBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.inflate(inflater, R.layout.list_item_view_training, null, false, component)
   */
  @NonNull
  @Deprecated
  public static ListItemViewTrainingBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable Object component) {
    return ViewDataBinding.<ListItemViewTrainingBinding>inflateInternal(inflater, R.layout.list_item_view_training, null, false, component);
  }

  public static ListItemViewTrainingBinding bind(@NonNull View view) {
    return bind(view, DataBindingUtil.getDefaultComponent());
  }

  /**
   * This method receives DataBindingComponent instance as type Object instead of
   * type DataBindingComponent to avoid causing too many compilation errors if
   * compilation fails for another reason.
   * https://issuetracker.google.com/issues/116541301
   * @Deprecated Use DataBindingUtil.bind(view, component)
   */
  @Deprecated
  public static ListItemViewTrainingBinding bind(@NonNull View view, @Nullable Object component) {
    return (ListItemViewTrainingBinding)bind(component, view, R.layout.list_item_view_training);
  }
}
